{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1476503784,"rating":612,"authorHandle":"zscoder","modificationTimeSeconds":1477014899,"id":47764,"title":"\u003cp\u003e[Tutorial] Non-trivial DP Tricks and Techniques\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHi everyone! Today I want to share some DP tricks and techniques that I have seen from some problems. I think this will be helpful for those who just started doing DP. Sometimes the tutorials are very brief and assumes the reader already understand the technique so it will be hard for people who are new to the technique to understand it.\u003c/p\u003e\u003cp\u003eNote : You should know how to do basic DP before reading the post\u003c/p\u003e\u003ch2\u003eDP + Bitmasks\u003c/h2\u003e\u003cp\u003eThis is actually a very well-known technique and most people should already know this. This trick is usually used when one of the variables have very small constraints that can allow exponential solutions. The classic example is applying it to solve the Travelling Salesman Problem in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e·2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e time. We let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e be the minimum time needed to visit the vertices in the set denoted by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and ending at vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. Note that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e will iterate through all possible subsets of the vertices and thus the number of states is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e·\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e. We can go from every state to the next states in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e by considering all possible next vertex to go to. Thus, the time complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e·\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eUsually, when doing DP + Bitmasks problems, we store the subsets as an integer from \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e - 1\u003c/span\u003e. How do we know which elements belong to a subset denoted by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e? We write \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e in its binary representation and for each bit \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e that is \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e, the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e-th element is included in the set. For example, the set \u003cspan class\u003d\"tex-span\"\u003e35 \u003d 100011\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e denotes the set \u003cspan class\u003d\"tex-span\"\u003e{0, 4, 5}\u003c/span\u003e (the bits are \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e-indexed from left to right). Thus, to test if the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e-th element is in the subset denoted by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, we can test if \u003ccode\u003ei \u0026amp; (1\u0026lt;\u0026lt;j)\u003c/code\u003e is positive. (Why? Recall that \u003ccode\u003e(1\u0026lt;\u0026lt;j)\u003c/code\u003e is \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e and how the \u0026amp; operator works.)\u003c/p\u003e\u003cp\u003eNow, we look at an example problem : \u003ca href\u003d\"/contest/453/problem/B\" title\u003d\"Codeforces Round 259 (Div. 1)\"\u003e453B - Маленькая пони и ларец гармонии\u003c/a\u003e\u003c/p\u003e\u003cp\u003eSo, the first step is to establish a maximum bound for the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. We prove that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026lt; 2\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Assume otherwise, then we can replace \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e and get a smaller answer (and clearly it preserves the coprime property). Thus, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026lt; 60\u003c/span\u003e. Note that there are \u003cspan class\u003d\"tex-span\"\u003e17\u003c/span\u003e primes less than \u003cspan class\u003d\"tex-span\"\u003e60\u003c/span\u003e, which prompts us to apply dp + bitmask here. Note that for any pair \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e ≠ \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, their set of prime factors must be disjoint since they\u0027re coprime.\u003c/p\u003e\u003cp\u003eNow, we let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e be the minimum answer one can get by changing the first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e elements such that the set of primes used (i.e. the set of prime factors of the numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e) is equal to the subset denoted by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e]\u003c/span\u003e denote the set of prime factors of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. Since \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≤ 60\u003c/span\u003e, we iterate through all possible values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, and for a fixed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e \u003d \u003ci\u003ef\u003c/i\u003e[\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e. Then, let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e be the complement of the set \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e\u003c/span\u003e, i.e. the set of primes not used by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. We iterate through all subsets of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. (see \u003ca href\u003d\"https://www.topcoder.com/community/data-science/data-science-tutorials/a-bit-of-fun-fun-with-bits/\"\u003ehere\u003c/a\u003e for how to iterate through all subsets of a subset \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e) For each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e which is a subset of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, we want \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003es\u003c/i\u003e|\u003ci\u003eF\u003c/i\u003e] \u003d \u003ci\u003emin\u003c/i\u003e(\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003es\u003c/i\u003e|\u003ci\u003eF\u003c/i\u003e], \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1][\u003ci\u003es\u003c/i\u003e] + \u003ci\u003eabs\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] - \u003ci\u003eb\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]))\u003c/span\u003e. This completes the dp. We can reconstruct the solution by storing the position where the dp achieves its minimum value for each state as usual. This solution is enough to pass the time limits.\u003c/p\u003e\u003cp\u003eHere are some other problems that uses bitmask dp :\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/678/problem/E\" title\u003d\"Educational Codeforces Round 13\"\u003e678E - Очередной турнир ситхов\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/662/problem/C\" title\u003d\"КРОК 2016 - Финальный Раунд [только для онсайт-финалистов]\"\u003e662C - Двоичная табличка\u003c/a\u003e\u003c/p\u003e\u003ch2\u003eDo we really need to visit all the states?\u003c/h2\u003e\u003cp\u003eSometimes, the naive dp solution to a problem might take too long and too much memory. However, sometimes it is worth noting that most of the states can be ignored because they will never be reached and this can reduce your time complexity and memory complexity.\u003c/p\u003e\u003cp\u003eExample Problem : \u003ca href\u003d\"/contest/505/problem/C\" title\u003d\"Codeforces Round 286 (Div. 2)\"\u003e505C - Мистер Китаюта, охотник за сокровищами\u003c/a\u003e\u003c/p\u003e\u003cp\u003eSo, the most direct way of doing dp would be let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e be the number of gems Mr. Kitayuta can collect after he jumps to island \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, while the length of his last jump is equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. Then, the dp transitions are quite obvious, because we only need to test all possible jumps and take the one that yields maximum results. If you have trouble with the naive dp, you can read the original editorial.\u003c/p\u003e\u003cp\u003eHowever, the naive method is too slow, because it would take \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e time and memory. The key observation here is that most of the states will never be visited, more precisiely \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e can only be in a certain range. These bounds can be obtained by greedily trying to maximize \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e and minimize \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e and we can see that their values will always be in the order of \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/fe/e9/fee90b539a37d828fec03406b6a4cc8c11847290.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e from the initial length of jump. This type of intuition might come in handy to optimize your dp and turn the naive dp into an AC solution.\u003c/p\u003e\u003ch2\u003eChange the object to dp\u003c/h2\u003e\u003cp\u003eExample Problem : \u003ca href\u003d\"/contest/559/problem/C\" title\u003d\"Codeforces Round 313 (Div. 1)\"\u003e559C - Геральд и гигантские шахматы\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis is a classic example. If the board was smaller, say \u003cspan class\u003d\"tex-span\"\u003e3000 × 3000\u003c/span\u003e, then the normal 2D dp would work. However, the dimensions of the grid is too large here. \u003c/p\u003e\u003cp\u003eNote that the number of blocked cells is not too large though, so we can try to dp on them. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e be the set of blocked cells. We add the ending cell to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e for convenience. We sort \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e in increasing order of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e-coordinate, and break ties by increasing order of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e-coordinate. As a result, the ending cell will always be the last element of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eNow, let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e be the number of ways to reach the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th blocked cell (assuming it is not blocked). Our goal is to find \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003es\u003c/i\u003e]\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e \u003d |\u003ci\u003eS\u003c/i\u003e|\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eNote that since we have sort \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e by increasing order, the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e-th blocked cell will not affect the number of ways to reach the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th blocked cell if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e \u0026lt; \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. (There is no path that visits the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e-th blocked cell first before visiting the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th blocked cell)\u003c/p\u003e\u003cp\u003eThe number of ways from square \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e)\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e)\u003c/span\u003e without any blocked cells is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b6/37/b637d1ec924b94f47d4f2a7beceee1b8a91ab217.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. (if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e \u0026gt; \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e \u0026gt; \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e. The case when some two are equal can be handled trivially). Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003eP\u003c/i\u003e, \u003ci\u003eQ\u003c/i\u003e)\u003c/span\u003e denote the number of ways to reach \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eQ\u003c/i\u003e\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e. We can calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003eP\u003c/i\u003e, \u003ci\u003eQ\u003c/i\u003e)\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e by precomputing factorials and its inverse like above.\u003c/p\u003e\u003cp\u003eThe base case, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[1]\u003c/span\u003e can be calculated as the number of ways to reach \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e from the starting square. Similarly, we initialize all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e as the number of ways to reach \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e from the starting square.\u003c/p\u003e\u003cp\u003eNow, we have to subtract the number of paths that reach some of the blocked cells. Assume we already fixed the values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[1], \u003ci\u003edp\u003c/i\u003e[2], ..., \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1]\u003c/span\u003e. For a fix blocked cell \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, we\u0027ll do so by dividing the paths into groups according to the \u003cstrong\u003efirst\u003c/strong\u003e blocked cell it encounters. The number of ways for each possible first blocked cell \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e is equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e]·\u003ci\u003ef\u003c/i\u003e(\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e, so we can subtract this from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e. Thus, this dp works in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAnother problem using this idea : \u003ca href\u003d\"/contest/722/problem/E\"\u003e722E - Исследовательский зонд\u003c/a\u003e\u003c/p\u003e\u003ch2\u003eOpen and Close Interval Trick\u003c/h2\u003e\u003cp\u003eExample Problem : \u003ca href\u003d\"/contest/626/problem/F\" title\u003d\"8VC Venture Cup 2016 - Elimination Round\"\u003e626F - Групповые проекты\u003c/a\u003e\u003c/p\u003e\u003cp\u003eFirst, note that the order doesn\u0027t matter so we can sort the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e in non-decreasing order. Now, note that every interval\u0027s imbalance can be calculated with its largest and smallest value. We start adding the elements to sets from smallest to largest in order. Suppose we\u0027re adding the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th element. Some of the current sets are \u003cstrong\u003eopen\u003c/strong\u003e, i.e. has a minimum value but is not complete yet (does not have a maximum). Suppose there are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e open sets. When we add \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, the sum \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e\u003c/span\u003e will contribute to each of the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e open sets, so we increase the current imbalance by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e][\u003ci\u003ek\u003c/i\u003e]\u003c/span\u003e be the number of ways such that when we inserted the first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e elements, there are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e \u003cstrong\u003eopen sets\u003c/strong\u003e and the total imbalance till now is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. Now, we see how to do the state transitions. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e \u003d \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1][\u003ci\u003ej\u003c/i\u003e][\u003ci\u003ek\u003c/i\u003e]\u003c/span\u003e. We analyze which states involves \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFirstly, the imbalance of the new state must be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eval\u003c/i\u003e \u003d \u003ci\u003ek\u003c/i\u003e + \u003ci\u003ej\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e)\u003c/span\u003e, as noted above. Now, there are a few cases :\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003eWe place the current number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e in its own group : Then, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e][\u003ci\u003eval\u003c/i\u003e] +  \u003d \u003ci\u003ev\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eWe place the current number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e in one of the open groups, but \u003cstrong\u003enot close it\u003c/strong\u003e : Then, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e][\u003ci\u003eval\u003c/i\u003e] +  \u003d \u003ci\u003ej\u003c/i\u003e·\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e (we choose one of the open groups to add \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eOpen a new group with minimum \u003d \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e : Then, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e + 1][\u003ci\u003eval\u003c/i\u003e] +  \u003d \u003ci\u003ev\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eClose an open group by inserting \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e in one of them and \u003cstrong\u003eclose it\u003c/strong\u003e : Then, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e - 1][\u003ci\u003eval\u003c/i\u003e] +  \u003d \u003ci\u003ej\u003c/i\u003e·\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eThe answer can be found as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e][0][0] + \u003ci\u003edp\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e][0][1] + ... + \u003ci\u003edp\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e][0][\u003ci\u003ek\u003c/i\u003e]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eRelated Problems :\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/466/problem/D\" title\u003d\"Codeforces Round 266 (Div. 2)\"\u003e466D - Увеличьте последовательность\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/367/problem/E\" title\u003d\"Codeforces Round 215 (Div. 1)\"\u003e367E - Сережа и отрезки\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u0026quot;Connected Component\u0026quot; DP\u003c/h2\u003e\u003cp\u003eExample Problem : \u003ca href\u003d\"http://s3-ap-northeast-1.amazonaws.com/data.cms.ioi-jp.org/open-2016/2016-open-skyscraper-en.pdf\"\u003eJOI 2016 Open Contest — Skyscrapers\u003c/a\u003e\u003c/p\u003e\u003cp\u003ePreviously, I\u0027ve made a blog post \u003ca href\u003d\"http://codeforces.com/blog/entry/45593\"\u003ehere\u003c/a\u003e asking for a more detailed solution. With some hints from \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Reyna\" title\u003d\"Гроссмейстер Reyna\"\u003eReyna\u003c/a\u003e, I finally figured it out and I\u0027ve seen this trick appeared some number of times.\u003c/p\u003e\u003cp\u003eAbridged Statement : Given \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, find the number of permutations of these numbers such that \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e - \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e| + |\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e - \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e| + ... + |\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/sub\u003e - \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e| ≤ \u003ci\u003eL\u003c/i\u003e\u003c/span\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e is a given integer.\u003c/p\u003e\u003cp\u003eConstraints : \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≤ 100, \u003ci\u003eL\u003c/i\u003e ≤ 1000, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≤ 1000\u003c/span\u003e\u003c/p\u003e\u003cp\u003eNow, we sort the values \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and add them into the permutation one by one. At each point, we will have some connected components of values (for example it will be something like \u003cspan class\u003d\"tex-span\"\u003e2, ?, 1, 5, ?, ?, 3, ?, 4\u003c/span\u003e)\u003c/p\u003e\u003cp\u003eNow, suppose we already added \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e\u003c/span\u003e. We treat the \u003cspan class\u003d\"tex-span\"\u003e?\u003c/span\u003e as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and calculate the cost. When we add a new number we increase the values of the \u003cspan class\u003d\"tex-span\"\u003e?\u003c/span\u003e and update the cost accordingly.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e][\u003ci\u003ek\u003c/i\u003e][\u003ci\u003el\u003c/i\u003e]\u003c/span\u003e be the number of ways to insert the first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e elements such that :\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eThere are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e connected components\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eThe total cost is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e (assuming the \u003cspan class\u003d\"tex-span\"\u003e?\u003c/span\u003e are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e)\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e of the ends of the permutations has been filled. (So, \u003cspan class\u003d\"tex-span\"\u003e0 ≤ \u003ci\u003el\u003c/i\u003e ≤ 2\u003c/span\u003e)\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eI will not describe the entire state transitions here as it will be very long. If you want the complete transitions you can view the code below, where I commented what each transition means.\u003c/p\u003e\u003cp\u003eSome key points to note :\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eEach time you add a new element, you have to update the total cost by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e - \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e times the number of filled spaces adjacent to an empty space.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eWhen you add a new element, it can either combine \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e connected components, create a new connected components, or be appended to the front or end of one of the connected components.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/bj9pm9\"\u003eCode with comments\u003c/a\u003e\u003c/p\u003e\u003cp\u003eA problem that uses this idea can be seen here : \u003ca href\u003d\"/contest/704/problem/B\" title\u003d\"Codeforces Round 366 (Div. 1)\"\u003e704B - Человек-муравей\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003cspan class\u003d\"tex-span\"\u003e × 2,  + 1\u003c/span\u003e trick\u003c/h2\u003e\u003cp\u003eThis might not be a very common trick, and indeed I\u0027ve only seen it once and applied it myself once. This is a special case of the \u0026quot;Do we really need to visit all the states\u0026quot; example.\u003c/p\u003e\u003cp\u003eExample \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e : \u003ca href\u003d\"https://www.hackerearth.com/problem/algorithm/perfect-permutations-september-clash/\"\u003ePerfect Permutations, Subtask 4\u003c/a\u003e\u003c/p\u003e\u003cp\u003eMy solution only works up to Subtask \u003cspan class\u003d\"tex-span\"\u003e4\u003c/span\u003e. The official solution uses a different method but the point here is to demonstrate this trick.\u003c/p\u003e\u003cp\u003eAbridged Statement : Find the number of permutations of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e with exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e inversions. (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e ≤ \u003ci\u003eN\u003c/i\u003e, \u003ci\u003eN\u003c/i\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e, \u003ci\u003eK\u003c/i\u003e ≤ 1000\u003c/span\u003e (for subtask \u003cspan class\u003d\"tex-span\"\u003e4\u003c/span\u003e))\u003c/p\u003e\u003cp\u003eYou might be wondering : How can we apply dp when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e is as huge as \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e\u003c/span\u003e? We\u0027ll show how to apply it below. The trick is to skip the unused states.\u003c/p\u003e\u003cp\u003eFirst, we look at how to solve this when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e, \u003ci\u003eK\u003c/i\u003e\u003c/span\u003e are small.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e be the number of permutations of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e inversions. Then, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e] \u003d \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1][\u003ci\u003ej\u003c/i\u003e] + \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1][\u003ci\u003ej\u003c/i\u003e - 1] + ... + \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1][\u003ci\u003ej\u003c/i\u003e - (\u003ci\u003ei\u003c/i\u003e - 1)]\u003c/span\u003e. Why? Again we consider the permutation by adding the numbers from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e in this order. When we add the element \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, adding it before \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e of the current elements will increase the number of inversions by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. So, we sum over all possibilities for all \u003cspan class\u003d\"tex-span\"\u003e0 ≤ \u003ci\u003ek\u003c/i\u003e ≤ \u003ci\u003ei\u003c/i\u003e - 1\u003c/span\u003e. We can calculate this in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e by sliding window/computing prefix sums.\u003c/p\u003e\u003cp\u003eHow do we get read of the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e factor and replace it with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e instead? We will use the following trick :\u003c/p\u003e\u003cp\u003eSuppose we calculated \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e for all \u003cspan class\u003d\"tex-span\"\u003e0 ≤ \u003ci\u003ej\u003c/i\u003e ≤ \u003ci\u003eK\u003c/i\u003e\u003c/span\u003e. We have already figured out how to calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + 1][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e for all \u003cspan class\u003d\"tex-span\"\u003e0 ≤ \u003ci\u003ej\u003c/i\u003e ≤ \u003ci\u003eK\u003c/i\u003e\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eK\u003c/i\u003e)\u003c/span\u003e. The trick here is we can calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[2\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eK\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eHow? We will find the number of permutations using \u003cspan class\u003d\"tex-span\"\u003e1, 2, ..., \u003ci\u003en\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e + 1, \u003ci\u003en\u003c/i\u003e + 2, ..., 2\u003ci\u003en\u003c/i\u003e\u003c/span\u003e and combine them together. Suppose the first permutation has \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e inversions and the second permutation has \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e inversions. How will the total number of inversions when we merge them? Clearly, there\u0027ll be at least \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e + \u003ci\u003ey\u003c/i\u003e\u003c/span\u003e inversions. \u003c/p\u003e\u003cp\u003eNow, we call the numbers from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e small and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e + 1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003en\u003c/i\u003e\u003c/span\u003e large. Suppose we already fixed the permutation of the small and large numbers. Thus, we can replace the small numbers with the letter \u0027S\u0027 and large numbers with the letter \u0027L\u0027. For each L, it increases the number of inversions by the number of Ss at the right of it. Thus, if we want to find the number of ways that this can increase the number of inversions by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e, we just have to find the number of unordered tuples of nonnegative integers \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e such that they sum up to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e (we can view \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e as the number of Ss at the back of the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th L)\u003c/p\u003e\u003cp\u003eHow do we count this value? We\u0027ll count the number of such tuples where each element is positive and at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e and the elements sum up to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e instead, regardless of its length. This value will be precisely what we want for large enough \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e because there can be at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e positive elements and thus the length will not exceed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u0026gt; \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. We can handle the values for small \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e with the naive \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e dp manually so there\u0027s no need to worry about it.\u003c/p\u003e\u003cp\u003eThus, it remains to count the number of such tuples where each element is positive and at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e and sums up to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e \u003d \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. Denote this value by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003eS\u003c/i\u003e, \u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e. We want to find \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e, \u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e. We can derive the recurrence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003eS\u003c/i\u003e, \u003ci\u003ek\u003c/i\u003e) \u003d \u003ci\u003ef\u003c/i\u003e(\u003ci\u003eS\u003c/i\u003e, \u003ci\u003ek\u003c/i\u003e - 1) + \u003ci\u003ef\u003c/i\u003e(\u003ci\u003eS\u003c/i\u003e - \u003ci\u003ek\u003c/i\u003e, \u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e, denoting whether we use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e or not in the sum. Thus, we can precompute these values in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eK\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eNow, let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e, \u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e be the number of permutations of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e with number of inversions equal to \u003cspan class\u003d\"tex-span\"\u003e0, 1, 2, ..., \u003ci\u003eK\u003c/i\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eTo complete this step, we can multiply the polynomial \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e + \u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003ci\u003ex\u003c/i\u003e + ... + \u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/sub\u003e\u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e by itself (in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eK\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e or \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/95/5e/955e582747e8cec202f5873e1eb89b3643c1d1f7.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e with FFT, but that doesn\u0027t really change the complexity since the precomputation already takes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eK\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e), to obtain the number of pairs of permutations of \u003cspan class\u003d\"tex-span\"\u003e{1, 2, ..., \u003ci\u003en\u003c/i\u003e}\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e{\u003ci\u003en\u003c/i\u003e + 1, \u003ci\u003en\u003c/i\u003e + 2, ..., 2\u003ci\u003en\u003c/i\u003e}\u003c/span\u003e with total number of inversions \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e for all \u003cspan class\u003d\"tex-span\"\u003e0 ≤ \u003ci\u003ei\u003c/i\u003e ≤ \u003ci\u003eK\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eNext, we just have to multiply this with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(0, 0) + \u003ci\u003ef\u003c/i\u003e(1, 1)\u003ci\u003ex\u003c/i\u003e + ... + \u003ci\u003ef\u003c/i\u003e(\u003ci\u003eK\u003c/i\u003e, \u003ci\u003eK\u003c/i\u003e)\u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e and we get the desired answer for permutations of length \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, as noted above.\u003c/p\u003e\u003cp\u003eThus, we have found a way to obtain \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[2\u003ci\u003ei\u003c/i\u003e][·]\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][·]\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eK\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eTo complete the solution, we first write \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e in its binary representation and compute the dp values for the number formed from the first \u003cspan class\u003d\"tex-span\"\u003e10\u003c/span\u003e bits (until the number is greater than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e). Then, we can update the dp values when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e is multiplied by \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e or increased by \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eK\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e time, so we can find the value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003eN\u003c/i\u003e][\u003ci\u003eK\u003c/i\u003e]\u003c/span\u003e in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/39/a2/39a29ab403c91375cb921e23a933d31db4d429f4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, which fits in the time limit for this subtask.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://www.hackerearth.com/submission/5123208/\"\u003eMy code\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eExample \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e : \u003ca href\u003d\"http://oj.tsinsen.com/A1314\"\u003eProblem Statement in Mandarin\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis solution originated from the comment from \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/WJMZBMR\" title\u003d\"Международный гроссмейстер WJMZBMR\"\u003eWJMZBMR\u003c/a\u003e \u003ca href\u003d\"http://codeforces.com/blog/entry/13381?#comment-182656\"\u003ehere\u003c/a\u003e\u003c/p\u003e\u003cp\u003eProblem Statement : A sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is valid if all its elements are pairwise distinct and \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ac/75/ac7557e84deab722b289f53f948fb6240c63f00a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. We define \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003evalue\u003c/i\u003e(\u003ci\u003eS\u003c/i\u003e)\u003c/span\u003e of a valid sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e as the product of its elements. Find the sum of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003evalue\u003c/i\u003e(\u003ci\u003eS\u003c/i\u003e)\u003c/span\u003e for all possible valid sequences \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e, modulo \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e is a prime.\u003c/p\u003e\u003cp\u003eConstraints : \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e, \u003ci\u003ep\u003c/i\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e, \u003ci\u003en\u003c/i\u003e ≤ 500, \u003ci\u003ep\u003c/i\u003e \u0026gt; \u003ci\u003eA\u003c/i\u003e \u0026gt; \u003ci\u003en\u003c/i\u003e + 1\u003c/span\u003e\u003c/p\u003e\u003cp\u003eFirstly, we can ignore the order of the sequence and multiply the answer by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e!\u003c/span\u003e in the end because the numbers are distinct.\u003c/p\u003e\u003cp\u003eFirst, we look at the naive solution :\u003c/p\u003e\u003cp\u003eNow, let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e be the sum of values of all valid sequences of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e where values from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e inclusive are used.\u003c/p\u003e\u003cp\u003eThe recurrence is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e] \u003d \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1][\u003ci\u003ej\u003c/i\u003e] + \u003ci\u003ei\u003c/i\u003e·\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1][\u003ci\u003ej\u003c/i\u003e - 1]\u003c/span\u003e, depending on whether \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e is used.\u003c/p\u003e\u003cp\u003eThis will give us a complexity of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eAn\u003c/i\u003e)\u003c/span\u003e, which is clearly insufficient.\u003c/p\u003e\u003cp\u003eNow, we\u0027ll use the idea from the last example. We already know how to calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + 1][·]\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][·]\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e time. Now, we just have to calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[2\u003ci\u003ei\u003c/i\u003e][·]\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][·]\u003c/span\u003e fast.\u003c/p\u003e\u003cp\u003eSuppose we want to calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[2\u003ci\u003eA\u003c/i\u003e][\u003ci\u003en\u003c/i\u003e]\u003c/span\u003e. Then, we consider for all possible \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e the sum of the values of all sequences where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e of the elements are selected from \u003cspan class\u003d\"tex-span\"\u003e1, 2, ..., \u003ci\u003eA\u003c/i\u003e\u003c/span\u003e and the remaining \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - \u003ci\u003ea\u003c/i\u003e\u003c/span\u003e are from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + 1, \u003ci\u003ei\u003c/i\u003e + 2, ..., 2\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFirstly, note that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f8/40/f840b04400988553f205a0c6d4dd0585fc419bcd.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eNow, let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e denote the sum of all values of sequences of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e where elements are chosen from \u003cspan class\u003d\"tex-span\"\u003e{1, 2, ..., \u003ci\u003eA\u003c/i\u003e}\u003c/span\u003e, i.e. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003eA\u003c/i\u003e][\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e denote the same value, but the elements are chosen from \u003cspan class\u003d\"tex-span\"\u003e{\u003ci\u003eA\u003c/i\u003e + 1, \u003ci\u003eA\u003c/i\u003e + 2, ..., 2\u003ci\u003eA\u003c/i\u003e}\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eNow, we claim that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/0a/79/0a797587eadce9f611408ae16fd6922249cd44cb.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Indeed, this is just a result of the formula above, where we iterate through all possible subset sizes. Note that the term \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d3/09/d309b3b10db476d60d0e99e8d2dc6547261d0ac3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is the number of sets of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e which contains a given subset of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e and all elements are chosen from \u003cspan class\u003d\"tex-span\"\u003e1, 2, ..., \u003ci\u003eA\u003c/i\u003e\u003c/span\u003e. (take a moment to convince yourself about this formula)\u003c/p\u003e\u003cp\u003eNow, computing the value of \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d3/09/d309b3b10db476d60d0e99e8d2dc6547261d0ac3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e isn\u0027t hard (you can write out the binomial coefficient and multiply its term one by one with some precomputation, see the formula in the original pdf if you\u0027re stuck), and once you have that, you can calculate the values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFinally, with the values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, we can calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[2\u003ci\u003eA\u003c/i\u003e][·]\u003c/span\u003e the same way as the last example, as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[2\u003ci\u003eA\u003c/i\u003e][\u003ci\u003en\u003c/i\u003e]\u003c/span\u003e is just \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/12/9a/129add2e541bab81b85e67b8d9aaac2a7437fc64.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and we can calculate this by multiplying the two polynomials formed by \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e. Thus, the entire step can be done in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThus, we can calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[2\u003ci\u003ei\u003c/i\u003e][·]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + 1][·]\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e respectively from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][·]\u003c/span\u003e. Thus, we can write \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e in binary as in the last example and compute the answers step by step, using at most \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d9/54/d95429c31909d8e9bd8f662baa407c94fc5e4009.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e steps. Thus, the total time complexity is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/99/c7/99c755a9f778d16d33cc52dbe301edfc3ae060df.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, which can pass.\u003c/p\u003e\u003cp\u003eThis is the end of this post. I hope you benefited from it and please share your own dp tricks in the comments with us.\u003c/p\u003e\u003c/div\u003e","tags":["dp","tutorial","tricks"]}}